'use server';

/**
 * @fileOverview This file defines a Genkit flow for answering user queries about forestry policies and regulations.
 *
 * answerForestryQuery - An async function that takes a user's query as input and returns a summarized and easily understandable answer generated by an AI.
 * AnswerForestryQueryInput - The input type for the answerForestryQuery function.
 * AnswerForestryQueryOutput - The return type for the answerForestryQuery function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerForestryQueryInputSchema = z.object({
  query: z.string().describe('The user query about forestry policies and regulations.'),
});
export type AnswerForestryQueryInput = z.infer<typeof AnswerForestryQueryInputSchema>;

const AnswerForestryQueryOutputSchema = z.object({
  answer: z.string().describe('The summarized and easily understandable answer to the user query.'),
});
export type AnswerForestryQueryOutput = z.infer<typeof AnswerForestryQueryOutputSchema>;

export async function answerForestryQuery(input: AnswerForestryQueryInput): Promise<AnswerForestryQueryOutput> {
  return answerForestryQueryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'answerForestryQueryPrompt',
  input: {schema: AnswerForestryQueryInputSchema},
  output: {schema: AnswerForestryQueryOutputSchema},
  prompt: `You are an AI assistant specialized in providing clear and concise answers to questions about forestry policies and regulations.

  User Query: {{{query}}}

  Please provide a summarized and easily understandable answer to the user's query.
  `,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const answerForestryQueryFlow = ai.defineFlow(
  {
    name: 'answerForestryQueryFlow',
    inputSchema: AnswerForestryQueryInputSchema,
    outputSchema: AnswerForestryQueryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
